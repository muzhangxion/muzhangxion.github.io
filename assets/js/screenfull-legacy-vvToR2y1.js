System.register([],(function(e,n){"use strict";return{execute:function(){const n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],l=(()=>{if("undefined"==typeof document)return!1;const e=n[0],l={};for(const r of n){const n=r?.[1];if(n in document){for(const[n,t]of r.entries())l[e[n]]=t;return l}}return!1})(),r={change:l.fullscreenchange,error:l.fullscreenerror};let t={request:(e=document.documentElement,n)=>new Promise(((r,c)=>{const s=()=>{t.off("change",s),r()};t.on("change",s);const u=e[l.requestFullscreen](n);u instanceof Promise&&u.then(s).catch(c)})),exit:()=>new Promise(((e,n)=>{if(!t.isFullscreen)return void e();const r=()=>{t.off("change",r),e()};t.on("change",r);const c=document[l.exitFullscreen]();c instanceof Promise&&c.then(r).catch(n)})),toggle:(e,n)=>t.isFullscreen?t.exit():t.request(e,n),onchange(e){t.on("change",e)},onerror(e){t.on("error",e)},on(e,n){const l=r[e];l&&document.addEventListener(l,n,!1)},off(e,n){const l=r[e];l&&document.removeEventListener(l,n,!1)},raw:l};Object.defineProperties(t,{isFullscreen:{get:()=>Boolean(document[l.fullscreenElement])},element:{enumerable:!0,get:()=>document[l.fullscreenElement]??void 0},isEnabled:{enumerable:!0,get:()=>Boolean(document[l.fullscreenEnabled])}}),l||(t={isEnabled:!1}),e("s",t)}}}));
